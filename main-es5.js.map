{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/class/event/event.ts","webpack:///src/app/class/user/user.ts","webpack:///src/app/event/event.component.ts","webpack:///src/app/event/event.component.html","webpack:///src/app/eventview/eventview.component.ts","webpack:///src/app/eventview/eventview.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/service/config.service.ts","webpack:///src/app/service/event.service.ts","webpack:///src/app/service/password-encryption.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","router","configService","eventService","sessionKey","sessionStorage","getItem","console","log","clear","clearedKey","window","location","assign","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","Event","userEmail","eventID","eventName","eventDescription","eventLocation","dateTime","eventType","User","email","password","firstName","lastName","contact","EventComponent","event","undefined","document","getElementById","value","createEvent","subscribe","data","navigate","EventviewComponent","events","isHidden","getAllEvents","i","push","index","tempID","deleteEventById","splice","LoginComponent","encryptionService","user","login","setItem","alert","ProfileComponent","getUserByEmail","logOut","RegisterComponent","createUser","register","ConfigService","http","httpOptions","headers","baseUrl","post","error","get","put","providedIn","EventService","PasswordEncryptionService","newPassword","forwards","backwards","tempIndex","length","indexOf","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule, Component } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { EventComponent } from './event/event.component';\r\nimport { EventviewComponent } from './eventview/eventview.component';\r\n\r\nconst routes: Routes = [\r\n\t{ path: '', component: LoginComponent },\r\n\t{ path: 'register', component: RegisterComponent },\r\n\t{ path: 'login', component: LoginComponent },\r\n\t{ path: 'profile', component: ProfileComponent },\r\n\t{ path: 'event', component: EventComponent },\r\n\t{ path: 'eventview', component: EventviewComponent },\r\n];\r\n\r\n@NgModule({\r\n\timports: [RouterModule.forRoot(routes)],\r\n\texports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { ConfigService } from './service/config.service';\r\nimport { EventService } from './service/event.service';\r\n\r\n@Component({\r\n\tselector: 'app-root',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n\ttitle: 'GatherUp';\r\n\tsubTitle: 'Not a Meetup Clone';\r\n\r\n\tsessionKey: string;\r\n\r\n\tconstructor(private router: Router, private configService: ConfigService, private eventService: EventService) {\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.sessionKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"AppComponent sessionKey: \" + this.sessionKey);\r\n\t}\r\n\r\n\tlogOut() {\r\n\t\tconsole.log(\"--- logOut() button clicked ---\");\r\n\r\n\t\t// Removes all saved data from session\r\n\t\tlet sessionKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"sessionKey: \" + sessionKey);\r\n\t\tsessionStorage.clear();\r\n\r\n\t\t// Tests if key still remains\r\n\t\tlet clearedKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"clearedKey: \" + clearedKey);\r\n\r\n\t\t// Routes\r\n\t\twindow.location.assign(\"/login\");\r\n\t}\r\n}\r\n","<div>\r\n\t<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\t\t<a class=\"navbar-brand\">GatherUp</a>\r\n\t\t<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t<span class=\"navbar-toggler-icon\"></span>\r\n\t\t</button>\r\n\t\t<div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n\t\t\t<ul class=\"navbar-nav\">\r\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"!sessionKey\">\r\n\t\t\t\t\t<a class=\"nav-link\" [routerLink]=\"['/register']\" routerLinkActive=\"router-link-active\">Register</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"!sessionKey\">\r\n\t\t\t\t\t<a class=\"nav-link\" [routerLink]=\"['/login']\" routerLinkActive=\"router-link-active\">Login</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"sessionKey\">\r\n\t\t\t\t\t<a class=\"nav-link\" [routerLink]=\"['/profile']\" routerLinkActive=\"router-link-active\">Profile</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"sessionKey\">\r\n\t\t\t\t\t<a class=\"nav-link\" [routerLink]=\"['/eventview']\" routerLinkActive=\"router-link-active\">Event View</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"sessionKey\">\r\n\t\t\t\t\t<a class=\"nav-link\" [routerLink]=\"['/event']\" routerLinkActive=\"router-link-active\">Add Event</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"sessionKey\">\r\n\t\t\t\t\t<a class=\"nav-link\" (click)=\"logOut()\" [routerLink]=\"['/login']\" routerLinkActive=\"router-link-active\">Log Out</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</nav>\r\n\t<div class=\"container\">\r\n\t\t<router-outlet></router-outlet>\r\n\t</div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { EventComponent } from './event/event.component';\r\nimport { ConfigService } from './service/config.service';\r\nimport { EventService } from './service/event.service';\r\nimport { PasswordEncryptionService } from './service/password-encryption.service';\r\nimport { EventviewComponent } from './eventview/eventview.component';\r\n\r\n@NgModule({\r\n\tdeclarations: [\r\n\t\tAppComponent,\r\n\t\tRegisterComponent,\r\n\t\tLoginComponent,\r\n\t\tProfileComponent,\r\n\t\tEventComponent,\r\n\t\tEventviewComponent\r\n\t],\r\n\timports: [\r\n\t\tBrowserModule,\r\n\t\tFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tAppRoutingModule,\r\n\t],\r\n\tproviders: [\r\n\t\tConfigService,\r\n\t\tEventService,\r\n\t\tPasswordEncryptionService\r\n\t],\r\n\tbootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","export class Event {\r\n\r\n\tuserEmail: string; // FK to associate events with their users\r\n\teventID: number;\r\n\teventName: string\r\n\teventDescription: string;\r\n\teventLocation: string;\r\n\tdateTime: string;\r\n\teventType: string;\r\n\r\n\tconstructor(userEmail: string, eventID: number, eventName: string, eventDescription: string, eventLocation: string, dateTime: string, eventType: string) {\r\n\t\tthis.userEmail = userEmail;\r\n\t\tthis.eventID = eventID;\r\n\t\tthis.eventName = eventName;\r\n\t\tthis.eventDescription = eventDescription;\r\n\t\tthis.eventLocation = eventLocation;\r\n\t\tthis.dateTime = dateTime;\r\n\t\tthis.eventType = eventType;\r\n\t}\r\n}\r\n","export class User {\r\n\r\n\tid: number;\r\n\temail: string; // PK to associate users with their events\r\n\tpassword: string;\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\tcontact: string;\r\n\r\n\tconstructor(id: number, email: string, password: string, firstName: string, lastName: string, contact: string) {\r\n\t\tthis.id = id;\r\n\t\tthis.email = email;\r\n\t\tthis.password = password;\r\n\t\tthis.firstName = firstName;\r\n\t\tthis.lastName = lastName;\r\n\t\tthis.contact = contact;\r\n\t}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Event } from '../class/event/event';\r\nimport { ConfigService } from '../service/config.service';\r\nimport { EventService } from '../service/event.service';\r\n\r\n@Component({\r\n\tselector: 'app-event',\r\n\ttemplateUrl: './event.component.html',\r\n\tstyleUrls: ['./event.component.css']\r\n})\r\nexport class EventComponent implements OnInit {\r\n\r\n\tevent: Event;\r\n\r\n\tsessionKey: string;\r\n\r\n\tconstructor(private router: Router, private configService: ConfigService, private eventService: EventService) {\r\n\t\tthis.event = new Event(undefined, undefined, undefined, undefined, undefined, undefined, undefined);\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\t// Grabs key from current session\r\n\t\tthis.sessionKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"Current sessionKey: \" + this.sessionKey);\r\n\r\n\t\t// Validates if key exists and routes accordingly\r\n\t\tif (this.sessionKey == null) {\r\n\t\t\twindow.location.assign(\"/login\");\r\n\t\t}\r\n\t}\r\n\r\n\t// CREATE\r\n\tcreateEvent() {\r\n\t\tconsole.log(\"create() clicked.\");\r\n\r\n\t\t// Constructs an event object based on input values\r\n\t\tlet eventName = (<HTMLInputElement>document.getElementById(\"inputEventName\")).value;\r\n\t\tlet eventDescription = (<HTMLInputElement>document.getElementById(\"inputEventDescription\")).value;\r\n\t\tlet eventLocation = (<HTMLInputElement>document.getElementById(\"inputEventLocation\")).value;\r\n\t\tlet dateTime = (<HTMLInputElement>document.getElementById(\"inputDateTime\")).value;\r\n\t\tlet eventType = (<HTMLInputElement>document.getElementById(\"inputEventType\")).value;\r\n\t\tthis.event = new Event(sessionStorage.getItem(\"email\"), undefined, eventName, eventDescription, eventLocation, dateTime, eventType);\r\n\r\n\t\t// Sanity check\r\n\t\tconsole.log(this.event);\r\n\r\n\t\t// POSTs event to endpoint and routes to event view\r\n\t\tthis.eventService.createEvent(this.event).subscribe(data => this.router.navigate([\"/eventview\"]));\r\n\t}\r\n}\r\n","<div class=\"container shadow bg-light p-2 my-5\">\r\n\t<div class=\"container d-flex justify-content-center mt-5\">\r\n\t\t<img class=\"rounded mx-auto d-block shadow\" src=\"https://w.wallhaven.cc/full/5w/wallhaven-5w6j85.jpg\" width=\"50%\" alt=\"Event Image\">\r\n\t</div>\r\n\t<!-- EVENT CREATION -->\r\n\t<div class=\"container\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-6 mx-auto\">\r\n\t\t\t\t<h2 class=\"display-4 text-center m-4\">Add an Event</h2>\r\n\t\t\t\t<form (ngSubmit)=\"createEvent()\" #thisForm=\"ngForm\">\r\n\t\t\t\t\t<!-- INPUT FIELDS -->\r\n\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t<input [(ngModel)]=\"event.eventName\" #eventName=\"ngModel\" name=\"inputEventName\" id=\"inputEventName\" type=\"text\" placeholder=\"Event Name\" class=\"form-control border-0 shadow px-4\" required>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t<input [(ngModel)]=\"event.eventDescription\" #eventDescription=\"ngModel\" name=\"inputEventDescription\" id=\"inputEventDescription\" type=\"text\" placeholder=\"Event Description\" class=\"form-control border-0 shadow px-4\" required>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t<input [(ngModel)]=\"event.eventLocation\" #eventLocation=\"ngModel\" name=\"inputEventLocation\" id=\"inputEventLocation\" type=\"text\" placeholder=\"Event Location\" class=\"form-control border-0 shadow px-4\" required>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t<input [(ngModel)]=\"event.dateTime\" #dateTime=\"ngModel\" name=\"inputDateTime\" id=\"inputDateTime\" type=\"datetime-local\" class=\"form-control border-0 shadow px-4\" required>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t<select [(ngModel)]=\"event.eventType\" #eventType=\"ngModel\" name=\"inputEventType\" id=\"inputEventType\" class=\"form-control border-0 shadow px-4\">\r\n\t\t\t\t\t\t\t<option value=\"Generic Event\">Generic Event</option>\r\n\t\t\t\t\t\t\t<option value=\"Outdoors\">Outdoors</option>\r\n\t\t\t\t\t\t\t<option value=\"Bar\">Bar</option>\r\n\t\t\t\t\t\t\t<option value=\"Brunch\">Brunch</option>\r\n\t\t\t\t\t\t\t<option value=\"Party\">Party</option>\r\n\t\t\t\t\t\t\t<option value=\"Game Night\">Game Night</option>\r\n\t\t\t\t\t\t\t<option value=\"Hootenanny\">Hootenanny</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- BUTTONS -->\r\n\t\t\t\t\t<div class=\"container col-8 my-5\">\r\n\t\t\t\t\t\t<button class=\"btn btn-success btn-block shadow\" type=\"submit\">Add</button>\r\n\t\t\t\t\t\t<button class=\"btn btn-warning btn-block shadow\" type=\"reset\">Reset</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<!-- ROUTING -->\r\n\t\t\t\t<!-- <div class=\"container col-8 my-4\">\r\n\t\t\t\t\t<button class=\"btn btn-primary btn-block shadow\" type=\"button\" [routerLink]=\"['/profile']\" routerLinkActive=\"router-link-active\">My Profile</button>\r\n\t\t\t\t</div> -->\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { EventService } from '../service/event.service';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Event } from '../class/event/event';\r\n\r\n@Component({\r\n\tselector: 'app-eventview',\r\n\ttemplateUrl: './eventview.component.html',\r\n\tstyleUrls: ['./eventview.component.css']\r\n})\r\nexport class EventviewComponent implements OnInit {\r\n\r\n\tevent: Event;\r\n\tevents: Event[] = [];\r\n\r\n\ttempID: any;\r\n\ttempArray: Event[];\r\n\r\n\teventID: string;\r\n\r\n\tsessionKey: string;\r\n\r\n\tconstructor(private eventService: EventService) {\r\n\t\tthis.event = new Event(undefined, undefined, undefined, undefined, undefined, undefined, undefined);\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\t// Grabs key from current session\r\n\t\tthis.sessionKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"Current sessionKey: \" + this.sessionKey);\r\n\r\n\t\t// Validates if key exists and routes accordingly\r\n\t\tif (this.sessionKey == null) {\r\n\t\t\twindow.location.assign(\"/login\");\r\n\t\t} else {\r\n\t\t\tthis.eventService.getAllEvents().subscribe(data => {\r\n\t\t\t\tconsole.log(\"ALL EVENTS FROM DATABASE: \");\r\n\t\t\t\tfor (let i in data) {\r\n\t\t\t\t\tconsole.log(data[i]);\r\n\t\t\t\t\tif (data[i].userEmail == sessionStorage.getItem(\"email\")) {\r\n\t\t\t\t\t\tthis.events.push(data[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tisHidden = false;\r\n\tdeleteEvent(index: number) {\r\n\t\t// Note: be careful ordering things around in here; may break method\r\n\r\n\t\tconsole.log(\"test() clicked.\");\r\n\r\n\t\t// Assigns to local variable and passes it as an argument to backend\r\n\t\tthis.tempID = this.events[index].eventID;\r\n\t\tconsole.log(\"Current index's eventID: \" + this.events[index].eventID);\r\n\t\tthis.eventService.deleteEventById(this.tempID).subscribe(data => this.event = data)\r\n\r\n\t\t// Removes from local array (to hide from user immediately)\r\n\t\tthis.events.splice(index, 1);\r\n\t}\r\n}\r\n","<!-- EVENT VIEW -->\r\n<div class=\"container shadow bg-light p-2 my-5\">\r\n\t<div class=\"container\">\r\n\t\t<div class=\"display-4 text-center m-4\">\r\n\t\t\tMy Events\r\n\t\t</div>\r\n\t\t<div class=\"container col-8\">\r\n\t\t\t<div *ngFor=\"let event of events; let i=index\">\r\n\t\t\t\t<div *ngIf=\"!isHidden\" class=\"card p-4 my-4 border-0 shadow\">\r\n\t\t\t\t\t<p hidden><strong>Event ID: </strong>{{event?.eventID}}</p>\r\n\t\t\t\t\t<p><strong>Event Name: </strong>{{event?.eventName}}</p>\r\n\t\t\t\t\t<p><strong>Event Description: </strong>{{event?.eventDescription}}</p>\r\n\t\t\t\t\t<p><strong>Event Location: </strong>{{event?.eventLocation}}</p>\r\n\t\t\t\t\t<p><strong>Date & Time: </strong>{{event?.dateTime | date}}</p>\r\n\t\t\t\t\t<p><strong>Event Type: </strong>{{event?.eventType}}</p>\r\n\t\t\t\t\t<hr>\r\n\r\n\t\t\t\t\t<button class=\"btn btn-danger\" (click)=\"deleteEvent(i)\" type=\"button\">Delete</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- ROUTING -->\r\n\t\t<!-- <div class=\"container col-4\">\r\n\t\t\t<button class=\"btn btn-success btn-block shadow my-4\" type=\"button\" [routerLink]=\"['/event']\" routerLinkActive=\"router-link-active\">Add a New Event</button>\r\n\t\t\t<button class=\"btn btn-primary btn-block shadow my-4\" type=\"button\" [routerLink]=\"['/profile']\" routerLinkActive=\"router-link-active\">My Profile</button>\r\n\t\t</div> -->\r\n\t</div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { User } from '../class/user/user';\r\nimport { ConfigService } from '../service/config.service';\r\nimport { PasswordEncryptionService } from '../service/password-encryption.service';\r\n\r\n@Component({\r\n\tselector: 'app-login',\r\n\ttemplateUrl: './login.component.html',\r\n\tstyleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n\tuser: User = new User(undefined, undefined, undefined, undefined, undefined, undefined);\r\n\r\n\tconstructor(private router: Router, private configService: ConfigService, private encryptionService: PasswordEncryptionService) {\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t}\r\n\r\n\tlogin() {\r\n\t\tconsole.log(\"--- login() button pressed ---\");\r\n\r\n\t\t// Constructs a user object based on input values\r\n\t\tlet email = (<HTMLInputElement>document.getElementById(\"inputEmail\")).value;\r\n\t\tlet password = (<HTMLInputElement>document.getElementById(\"inputPassword\")).value;\r\n\t\tlet user: User = new User(undefined, email, password, undefined, undefined, undefined);\r\n\r\n\t\t// Sanity check\r\n\t\tconsole.log(\"SENDING USER TO BACKEND: \");\r\n\t\tconsole.log(user);\r\n\r\n\t\t// Validates and routes accordingly\r\n\t\tthis.configService.login(user).subscribe(data => {\r\n\t\t\tconsole.log(\"USER FROM DATABASE: \");\r\n\t\t\tconsole.log(data);\r\n\t\t\tif (data != null) {\r\n\t\t\t\tconsole.log(\"Successful login.\");\r\n\r\n\t\t\t\t// Saves data (email) to a session\r\n\t\t\t\tsessionStorage.setItem(\"email\", email);\r\n\t\t\t\tlet sessionKey = sessionStorage.getItem(\"email\");\r\n\t\t\t\tconsole.log(\"Stored key: \" + sessionKey);\r\n\r\n\t\t\t\t// Route\r\n\t\t\t\twindow.location.assign(\"/eventview\")\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"Failed login.\");\r\n\t\t\t\talert(\"Invalid credentials!\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// // Constructs a user object based on input values\r\n// let email = (<HTMLInputElement>document.getElementById(\"inputEmail\")).value;\r\n// let password = (<HTMLInputElement>document.getElementById(\"inputPassword\")).value;\r\n// this.user.email = email;\r\n// this.user.password = password;\r\n\r\n// // Validates against hard-coded credentials\r\n// if (this.user.email == \"hello@world.com\" && this.user.password == \"p4ssw0rd\") {\r\n// \talert('Login success!\\n\\n' + JSON.stringify(this.user, null, 4));\r\n// \tlocation.href = \"/profile\"; // routes accordingly\r\n// } else {\r\n// \talert(\"Invalid credentials!\")\r\n// }\r\n\r\n// // Sends user object to backend AND routes to event view\r\n// this.configService.login(this.user).subscribe(data => this.router.navigate([\"/eventview\"]));\r\n\r\n// Optional error handling\r\n// this.configService.login(this.user).subscribe({\r\n// \tnext: data => this.user = data,\r\n// \terror: error => console.log(\"Error: \", error)\r\n// });","<div class=\"container-fluid\">\r\n\t<div class=\"row no-gutter\">\r\n\t\t<!-- LEFT HALF -->\r\n\t\t<div class=\"col-md-6 d-none d-md-flex bg-image\"></div>\r\n\r\n\t\t<!-- RIGHT HALF -->\r\n\t\t<div class=\"col-md-6 bg-light\">\r\n\t\t\t<div class=\"login d-flex align-items-center\">\r\n\r\n\t\t\t\t<!-- LOGIN-->\r\n\t\t\t\t<div class=\"container\">\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-8 mx-auto\">\r\n\t\t\t\t\t\t\t<h3 class=\"display-4\">Login</h3>\r\n\t\t\t\t\t\t\t<form (ngSubmit)=\"login()\" #thisForm=\"ngForm\">\r\n\t\t\t\t\t\t\t\t<!-- INPUT FIELDS -->\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.email\" #email=\"ngModel\" name=\"inputEmail\" id=\"inputEmail\" type=\"email\" placeholder=\"Email address\" class=\"form-control rounded-pill border-0 shadow my-3 px-4\" pattern=\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"email.errors.required\">Email is required!</div>\r\n\t\t\t\t\t\t\t\t\t\t<!-- PatternValidator -->\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"email.errors?.pattern\">\r\n\t\t\t\t\t\t\t\t\t\t\tEmail must be in [email@domain.info] format.\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.password\" #password=\"ngModel\" name=\"inputPassword\" id=\"inputPassword\" type=\"password\" placeholder=\"Password\" class=\"form-control rounded-pill border-0 shadow my-3 px-4\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"password.errors.required\">\r\n\t\t\t\t\t\t\t\t\t\t\tPassword is required!\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- BUTTONS -->\r\n\t\t\t\t\t\t\t\t<button class=\"btn btn-primary btn-block text-uppercase rounded-pill border-0 shadow mt-4\" type=\"submit\" [disabled]=\"!thisForm.form.valid\">Sign In</button>\r\n\r\n\t\t\t\t\t\t\t\t<!-- ROUTING -->\r\n\t\t\t\t\t\t\t\t<div class=\"text-center justify-content-between mt-4\">\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\tNew user? <a [routerLink]=\"['/register']\" routerLinkActive=\"router-link-active\" class=\"font-italic text-muted\">Register</a>\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { User } from '../class/user/user';\r\nimport { ConfigService } from '../service/config.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n\tselector: 'app-profile',\r\n\ttemplateUrl: './profile.component.html',\r\n\tstyleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n\tuser: User;\r\n\r\n\tsessionKey: string;\r\n\r\n\tconstructor(private router: Router, private configService: ConfigService) {\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\t// Grabs key from current session\r\n\t\tthis.sessionKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"Current sessionKey: \" + this.sessionKey);\r\n\r\n\t\t// Validates if key exists and routes accordingly\r\n\t\tif (this.sessionKey == null) {\r\n\t\t\twindow.location.assign(\"/login\");\r\n\t\t} else {\r\n\t\t\tthis.configService.getUserByEmail(this.sessionKey).subscribe(data => this.user = data);\r\n\t\t}\r\n\t}\r\n\r\n\tlogOut() {\r\n\t\tconsole.log(\"--- logOut() button clicked ---\");\r\n\r\n\t\t// Removes all saved data from session\r\n\t\tlet sessionKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"sessionKey: \" + sessionKey);\r\n\t\tsessionStorage.clear();\r\n\r\n\t\t// Tests if key still remains\r\n\t\tlet clearedKey = sessionStorage.getItem(\"email\");\r\n\t\tconsole.log(\"clearedKey: \" + clearedKey);\r\n\r\n\t\t// Routes\r\n\t\twindow.location.assign(\"/login\")\r\n\t}\r\n}\r\n","<div class=\"container my-5\">\r\n\t<div class=\"card\" style=\"width: 18rem;\">\r\n\t\t<img class=\"card-img-top my-4 p-4\" src=\"https://gatherup.com/wp-content/themes/gatherup/assets/images/GatherUp-Logo.svg\" alt=\"Card Image\">\r\n\t\t<div class=\"card-body\">\r\n\t\t\t<h4 class=\"card-title mb-4\">User Information</h4>\r\n\t\t\t<!-- USER INFORMATION -->\r\n\t\t\t<div class=\"text-left\">\r\n\t\t\t\t<p><strong>Email: </strong>{{user?.email}}</p>\r\n\t\t\t\t<p><strong>Password: </strong>{{user?.password}}</p>\r\n\t\t\t\t<p><strong>First Name: </strong>{{user?.firstName}}</p>\r\n\t\t\t\t<p><strong>Last Name: </strong>{{user?.lastName}}</p>\r\n\t\t\t\t<p><strong>Contact: </strong>{{user?.contact}}</p>\r\n\t\t\t</div>\r\n\t\t\t<!-- BUTTONS -->\r\n\t\t\t<div class=\"mt-5\">\r\n\t\t\t\t<button class=\"btn btn-primary btn-block\" [routerLink]=\"['/eventview']\" routerLinkActive=\"router-link-active\">My Events</button>\r\n\t\t\t\t<button class=\"btn btn-success btn-block\" [routerLink]=\"['/event']\" routerLinkActive=\"router-link-active\">Add Events</button>\r\n\t\t\t\t<button class=\"btn btn-danger btn-block\" (click)=\"logOut()\" [routerLink]=\"['/']\" routerLinkActive=\"router-link-active\">Log Out</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<!-- \r\n\t*ngFor=\"let user of users\"\r\n\r\n\tTo print raw JSON:\r\n\t\t<p>User: {{user | json}}</p>\r\n -->","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { User } from '../class/user/user';\r\nimport { ConfigService } from '../service/config.service';\r\nimport { PasswordEncryptionService } from '../service/password-encryption.service';\r\n\r\n@Component({\r\n\tselector: 'app-register',\r\n\ttemplateUrl: './register.component.html',\r\n\tstyleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n\tuser: User = new User(undefined, undefined, undefined, undefined, undefined, undefined);\r\n\r\n\tconstructor(private router: Router, private configService: ConfigService, private encryptionService: PasswordEncryptionService) {\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t}\r\n\r\n\tregister() {\r\n\t\tconsole.log(\"--- register() button pressed ---\");\r\n\r\n\t\t// Constructs a user object based on input values\r\n\t\tlet email = (<HTMLInputElement>document.getElementById(\"inputEmail\")).value;\r\n\t\tlet password = (<HTMLInputElement>document.getElementById(\"inputPassword\")).value;\r\n\t\tlet firstName = (<HTMLInputElement>document.getElementById(\"inputFirstName\")).value;\r\n\t\tlet lastName = (<HTMLInputElement>document.getElementById(\"inputLastName\")).value;\r\n\t\tlet contact = (<HTMLInputElement>document.getElementById(\"inputContact\")).value;\r\n\t\tlet user: User = new User(undefined, email, password, firstName, lastName, contact);\r\n\r\n\t\t// Sanity check\r\n\t\tconsole.log(\"SENDING USER TO BACKEND: \");\r\n\t\tconsole.log(user);\r\n\r\n\t\t// Validates and routes accordingly\r\n\t\tthis.configService.createUser(user).subscribe(data => {\r\n\t\t\tconsole.log(\"USER FROM DATABASE: \");\r\n\t\t\tconsole.log(data);\r\n\t\t\tif (data != null) {\r\n\t\t\t\tconsole.log(\"Registration success.\");\r\n\r\n\t\t\t\t// Saves data (email) to a session\r\n\t\t\t\tsessionStorage.setItem(\"email\", email);\r\n\t\t\t\tlet sessionKey = sessionStorage.getItem(\"email\");\r\n\t\t\t\tconsole.log(\"Stored key: \" + sessionKey);\r\n\r\n\t\t\t\t// Route\r\n\t\t\t\twindow.location.assign(\"/profile\")\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"Registration failed.\");\r\n\t\t\t\talert(\"User already exists. Try logging in instead?\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// // Constructs a user object based on input values; NOT NEEDED ANYMORE B/C TWO-WAY BINDING\r\n// let email = (<HTMLInputElement>document.getElementById(\"inputEmail\")).value;\r\n// let password = (<HTMLInputElement>document.getElementById(\"inputPassword\")).value;\r\n// let firstName = (<HTMLInputElement>document.getElementById(\"inputFirstName\")).value;\r\n// let lastName = (<HTMLInputElement>document.getElementById(\"inputLastName\")).value;\r\n// let contact = (<HTMLInputElement>document.getElementById(\"inputContact\")).value;\r\n// this.user = new User(undefined, email, password, firstName, lastName, contact);","<div class=\"container-fluid\">\r\n\t<div class=\"row no-gutter\">\r\n\t\t<!-- LEFT HALF -->\r\n\t\t<div class=\"col-md-6 d-none d-md-flex bg-image\"></div>\r\n\r\n\t\t<!-- RIGHT HALF -->\r\n\t\t<div class=\"col-md-6 bg-light\">\r\n\t\t\t<div class=\"register d-flex align-items-center\">\r\n\r\n\t\t\t\t<!-- REGISTER-->\r\n\t\t\t\t<div class=\"container\">\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-8 mx-auto\">\r\n\t\t\t\t\t\t\t<p class=\"display-4\">Register</p>\r\n\t\t\t\t\t\t\t<form (ngSubmit)=\"register()\" #thisForm=\"ngForm\">\r\n\t\t\t\t\t\t\t\t<!-- INPUT FIELDS -->\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.email\" #email=\"ngModel\" name=\"inputEmail\" id=\"inputEmail\" type=\"email\" placeholder=\"Email address\" class=\"form-control rounded-pill border-0 shadow px-4\" pattern=\"^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"email.errors.required\">Email is required!</div>\r\n\t\t\t\t\t\t\t\t\t\t<!-- PatternValidator -->\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"email.errors?.pattern\">\r\n\t\t\t\t\t\t\t\t\t\t\tEmail must be in [email@domain.info] format.\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.password\" #password=\"ngModel\" name=\"inputPassword\" id=\"inputPassword\" type=\"password\" placeholder=\"Password\" class=\"form-control rounded-pill border-0 shadow px-4\" pattern=\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"password.errors?.required\">Password is required!</div>\r\n\t\t\t\t\t\t\t\t\t\t<!-- PatternValidator -->\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"password.errors?.pattern\">\r\n\t\t\t\t\t\t\t\t\t\t\tPassword must be at least 8 characters long with at least one uppercase, one lowercase and one number.\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.firstName\" #firstName=\"ngModel\" name=\"inputFirstName\" id=\"inputFirstName\" type=\"text\" placeholder=\"First name\" class=\"form-control rounded-pill border-0 shadow px-4\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"firstName.errors.required\">\r\n\t\t\t\t\t\t\t\t\t\t\tFirst name is required!\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.lastName\" #lastName=\"ngModel\" name=\"inputLastName\" id=\"inputLastName\" type=\"text\" placeholder=\"Last name\" class=\"form-control rounded-pill border-0 shadow px-4\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"lastName.errors.required\">\r\n\t\t\t\t\t\t\t\t\t\t\tLast name is required!\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<input [(ngModel)]=\"user.contact\" #contact=\"ngModel\" name=\"inputContact\" id=\"inputContact\" type=\"text\" placeholder=\"Phone number\" class=\"form-control rounded-pill border-0 shadow px-4\" pattern=\"[0-9]{10}\" required>\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"contact.invalid && (contact.dirty || contact.touched)\" class=\"alert alert-danger rounded-pill border-0 shadow m-1 p-1 text-center text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"contact.errors.required\">\r\n\t\t\t\t\t\t\t\t\t\t\tPhone number is required!\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<!-- PatternValidator -->\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"contact.errors?.pattern\">\r\n\t\t\t\t\t\t\t\t\t\t\tPhone number must be in 10-digit format without hyphens.\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- BUTTONS -->\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-primary btn-block text-uppercase rounded-pill border-0 shadow mt-4\" type=\"submit\" [disabled]=\"!thisForm.form.valid\">Sign Up</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- ROUTING -->\r\n\t\t\t\t\t\t\t\t<div class=\"text-center justify-content-between mt-4\">\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\tHave an account? <a [routerLink]=\"['/login']\" routerLinkActive=\"router-link-active\" class=\"font-italic text-muted\">Login</a>\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { User } from '../class/user/user';\r\n\r\n/*\r\n\tThis service provides CRUD operations for users\r\n*/\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n\r\n\tpublic baseUrl: string;\r\n\r\n\t// Custom HTTP options to throw into CRUD operations\r\n\thttpOptions = {\r\n\t\theaders: new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Access-Control-Allow-Origin': '*',\r\n\t\t\t'Authorization': 'authkey',\r\n\t\t}),\r\n\t};\r\n\r\n\t// Boots HttpClient upon creation\r\n\tconstructor(private http: HttpClient) {\r\n\t\t// Development endpoint\r\n\t\t// this.baseUrl = \"http://localhost:9999/\";\r\n\r\n\t\t// Production endpoint\r\n\t\tthis.baseUrl = \"http://ec2-18-217-122-210.us-east-2.compute.amazonaws.com:9999/\";\r\n\t}\r\n\r\n\t// CREATE\r\n\tpublic createUser(user: User) {\r\n\t\ttry {\r\n\t\t\treturn this.http.post<User>(this.baseUrl + \"user\", user, this.httpOptions); // localhost:9999/user\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService createUser() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// READ\r\n\tpublic getAllUsers(): Observable<User[]> {\r\n\t\ttry {\r\n\t\t\treturn this.http.get<User[]>(this.baseUrl + \"user/all\", this.httpOptions); // localhost:9999/user/all\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService getAllUsers() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getUserById(id: number): Observable<User> {\r\n\t\ttry {\r\n\t\t\treturn this.http.get<User>(this.baseUrl + \"user/\" + id, this.httpOptions); // localhost:9999/user/{id}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService getUserById() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getUserByEmail(email: string): Observable<User> {\r\n\t\ttry {\r\n\t\t\treturn this.http.get<User>(this.baseUrl + \"user/email/\" + email, this.httpOptions); // localhost:9999/user/email/{email}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService getUserByEmail() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// UPDATE\r\n\tpublic updateUser(user: User) {\r\n\t\ttry {\r\n\t\t\treturn this.http.put<User>(this.baseUrl + \"user\", user, this.httpOptions); // localhost:9999/user\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService updateUser() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// DELETE\r\n\tpublic deleteUserById(id: number) {\r\n\t\ttry {\r\n\t\t\treturn this.http.delete<User>(this.baseUrl + \"user/\" + id, this.httpOptions) // localhost:9999/user/{id}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService deleteUserById() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// LOGIN\r\n\tpublic login(user: User): Observable<User> {\r\n\t\ttry {\r\n\t\t\treturn this.http.post<User>(this.baseUrl + \"user/verify\", user); // localhost:9999/user/verify\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"ConfigService login() error: \" + error);\r\n\t\t}\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Event } from '../class/event/event';\r\n\r\n/*\r\n\tThis service provides CRUD operations for events\r\n*/\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class EventService {\r\n\r\n\tpublic baseUrl: string;\r\n\r\n\t// Custom HTTP options to throw into CRUD operations\r\n\thttpOptions = {\r\n\t\theaders: new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Access-Control-Allow-Origin': '*',\r\n\t\t\t'Authorization': 'authkey',\r\n\t\t}),\r\n\t};\r\n\r\n\t// Boots HttpClient upon creation\r\n\tconstructor(private http: HttpClient) {\r\n\t\tthis.baseUrl = \"http://localhost:9999/\"; // sets baseUrl to the \"home\" endpoint\r\n\t}\r\n\r\n\t// CREATE\r\n\tpublic createEvent(event: Event) {\r\n\t\ttry {\r\n\t\t\treturn this.http.post<Event>(this.baseUrl + \"event\", event, this.httpOptions); // localhost:9999/event\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"EventService createEvent() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// READ\r\n\tpublic getAllEvents(): Observable<Event[]> {\r\n\t\ttry {\r\n\t\t\treturn this.http.get<Event[]>(this.baseUrl + \"event/all\", this.httpOptions); // localhost:9999/event/all\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"EventService getAllEvents() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getEventById(id: number): Observable<Event> {\r\n\t\ttry {\r\n\t\t\treturn this.http.get<Event>(this.baseUrl + \"event/\" + id); // localhost:9999/event/{id}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"EventService getEventById() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// UPDATE\r\n\tpublic updateEvent(event: Event) {\r\n\t\ttry {\r\n\t\t\treturn this.http.put<Event>(this.baseUrl + \"event\", event); // localhost:9999/event\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"EventService updateEvent() error: \" + error);\r\n\t\t}\r\n\t}\r\n\r\n\t// DELETE\r\n\tpublic deleteEventById(id: number) {\r\n\t\ttry {\r\n\t\t\treturn this.http.delete<Event>(this.baseUrl + \"/event/\" + id) // localhost:9999/event/{id}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"EventService deleteEventById() error: \" + error);\r\n\t\t}\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n// import { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from 'constants';\r\n\r\n/*\r\n\tEncrypts password before sending to DB\r\n*/\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class PasswordEncryptionService {\r\n\r\n\tconstructor() { }\r\n\r\n\tencrypt(password: string) {\r\n\t\tvar newPassword: string = \"\";\r\n\t\tvar forwards: string = \"ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz0987654321\";\r\n\t\tvar backwards: string = \"1234567890zyxwvutsrqponmlkjihgfedcbaABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\t\tvar tempIndex: number = 0;\r\n\r\n\t\tfor (var i: number = 0; i < password.length; i++) {\r\n\t\t\ttempIndex = forwards.indexOf(password[i]);\r\n\t\t\tnewPassword += backwards[tempIndex];\r\n\r\n\t\t}\r\n\t\tconsole.log(\"New password: \" + newPassword);\r\n\t\treturn newPassword;\r\n\t}\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}